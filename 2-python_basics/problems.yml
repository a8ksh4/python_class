014cb494-b543-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: myPricesDict() -> dict
  solution: "def myPricesDict():\n    my_prices = {\"bananna\": 4, \"apple\": 2, \"\
    orange\": 1.5, \"pear\": 3}\n    return my_prices\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Put the following items into a prices dictionary and return it:\n    \"bananna\"\
    : 4,\n    \"apple\": 2,\n    \"orange\": 1.5,\n    \"pear\": 3\n\nE.g:\ndef myPricesDict():\n\
    \    #your code here\n    return my_prices\n"
  tier: 24
  title: dictionaries_2
  unittests:
    test1: null
  uuid: 014cb494-b543-11e7-b1e7-ac220b2cb439
083d3a26-bab6-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: returnNoneArray(int, int) -> list of lists of None
  solution: "def return NoneArray(rows, cols):\n    out = []\n    for row in range(rows):\n\
    \        out.append([None for c in range(cols)])\n    return out\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Create a function called returnNoneArray that accepts two integers and\n\
    returns a list of lists of the dimmensions given as the two integers. The \nlist\
    \ of lists (an array) should contain None for each value. \n\nExample, two rows\
    \ by three cols would be:\n[ [None, None, None]\n  [None, None, None] ]\n\nE.g:\n\
    def return NoneArray(rows, cols):\n    #your code here\n    return none_array\n"
  tier: 26
  title: loops_3
  unittests:
    test1:
    - 1
    - 1
    test2:
    - 5
    - 6
    test3:
    - 21
    - 6
  uuid: 083d3a26-bab6-11e7-b66a-ac220b2cb439
1c3b9d9c-b9f3-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: carmenFound(dict) -> string
  solution: "def carmenFound(cities):\n    for city in cities:\n        if cities[city]\
    \ == True:\n            return city\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Create a function called carmenFound that is given a dictionary with a list\
    \ of\ncity names as keys, each associated with a boolean value indicating whether\n\
    or not Carmen is in the city.  Return the name of the city Carmen is found in!\n\
    \nE.g:\ndef carmenFound(cities):\n    #your code here\n    return city_name\n"
  tier: 25
  title: branching_3
  unittests:
    test1:
    - atlanta: true
      menphis: false
      redding: false
    test2:
    - atlanta: false
      menphis: true
      redding: false
  uuid: 1c3b9d9c-b9f3-11e7-b66a-ac220b2cb439
1e4b9af2-b9ed-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: checkKeysExist(dict, keys) -> dict
  solution: "def checkKeysExists(the_dict, keys):\n    out = {}\n    for key in keys:\n\
    \        out[key] = key in the_dict\n    return out\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called checkKeysExists that is given a dictionary and a\
    \ list\nof keys to look for in teh dictionary.  The function returns a new dictionary\n\
    containing each key in the provided list with an associated boolean value\nindicating\
    \ whether or not the key from the list was found in the given\ndictionary.\n\n\
    As an example, if given {'a': 0, 'b': 1} and ['a', 'c'] for keys, the output\n\
    would be {'a': True, 'c': False}. \n\nE.g:\ndef checkKeysExists(a_dictionary,\
    \ some_keys):\n    # do stuff here\n    return exists_dict\n"
  tier: 22
  title: dictionaries_6
  unittests:
    test1:
    - a: 12
      b: 2
    - - a
      - c
      - d
    test2:
    - a: 1
      b: 2
    - ()
  uuid: 1e4b9af2-b9ed-11e7-b66a-ac220b2cb439
2102c21c-b9e7-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: convTupleUniqueOrder(list) -> tuple
  solution: "def convTupleUniqueOrder(some_items):\n    out = []\n    for item in\
    \ some_items:\n        if item in out:\n            continue\n        out.append(item)\n\
    \    return tuple(out)\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called convTupleUniqueOrder(list) that accepts a list of\n\
    objects and returns a tuple (not a list) with only the unique items from the\n\
    list. Order of the returned tuple IS important. Order from the original list\n\
    should be preserved; the first time an object is observed in the given list, \n\
    it is in the returned tuple, and subsequent occurences are ignored. \n\nE.g:\n\
    def convTupleUniqueOrder(some_items):\n    # do stuff here\n    return unique_items\n"
  tier: 22
  title: sets_2
  unittests:
    test1:
    - - asfd
      - b
      - b
      - c
      - b
      - 1
      - 2
      - b
      - a
  uuid: 2102c21c-b9e7-11e7-b66a-ac220b2cb439
22041afa-b544-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: listToCSV(list) -> string
  solution: "def listToCSV(words_list):\n    csv_string = ','.join(words_list)\n \
    \   return csv_string\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"listToCSV\" that takes a list of strings and combines\n\
    them into a single string with all words separated by a comma: \",\".  For\nexample,\
    \ [\"one\", 'two', 'three'] becomes \"one,two,three\".\n\nE.g:\ndef listToCSV(words_list):\n\
    \    # do stuff here\n    return csv_string\n"
  tier: 22
  title: strings_6
  unittests:
    test1:
    - ('one', 'two', 'three')
    test2:
    - ('1', ',', ':', "fiftyfive")
  uuid: 22041afa-b544-11e7-b1e7-ac220b2cb439
377f8a94-b9eb-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: getDictKeys(dict) -> list
  solution: "def getDictKeys(a_dictionary):\n    return a_dictionary.keys()\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called getDictKeys that is given a dictionary and returns\
    \ a \nlist of keys in the given dictionary. \n\nE.g:\ndef getDictKeys(a_dictionary):\n\
    \    # do stuff here\n    return all_the_keys\n"
  tier: 22
  title: dictionaries_4
  unittests:
    test1:
    - a: 1
      b: 2
      c: 3
    test2:
    - a: []
      b: {}
      c: None
      1: 1
      ('a': null
      ): 2
  uuid: 377f8a94-b9eb-11e7-b66a-ac220b2cb439
4464b29f-86a1-4e4c-9261-f581d1b1c8e8:
  history:
    ab7511ee456ce56e64d69141b7e2241b:
      code: "def add(aaa,bbb):\n    x= aaa+bbb\n    return x"
      likes: 0
      memory: 0
      pep8: 0
      size: 0
      speed: 0
  imports: from random import randint, seed
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: addThem(int, int) -> int
  solution: "def addThem(num_a, num_b):\n    return num_a + num_b\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that takes 2 integers as parameter\nIt should return the\
    \ sum of the 2 integers.\n\nE.g. \ndef addThem(num_a, num_b):\n    #your code\
    \ here\n    return the_sum\n"
  tier: 20
  title: basic_math_1
  unittests:
    test1:
    - int(3)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: 4464b29f-86a1-4e4c-9261-f581d1b1c8e8
571207aa-b9ec-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: checkKeyExists(dict, key) -> bool
  solution: "def getDictKeys(a_dictionary):\n    return a_dictionary.keys()\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called checkKeyExists that is given a dictionary and a key\
    \ and\nreturns True if the key exists in the dictionary or False if it does not.\
    \ \n\nE.g:\ndef checkKeyExists(a_dictionary, the_key):\n    # do stuff here\n\
    \    return exists_bool\n"
  tier: 22
  title: dictionaries_5
  unittests:
    test1:
    - a: 1
      b: 2
    - a
    test2:
    - a: 1
      b: 2
    - 1
    test3:
    - a: 1
      b: 2
    - b
    test4:
    - a: 1
      b: 2
    - c
    test5:
    - a: 1
      b: 2
    - '2'
  uuid: 571207aa-b9ec-11e7-b66a-ac220b2cb439
59890270-b868-11e7-b66a-ac220b2cb439:
  history: {}
  imports: 'from random import randint, seed

    import subprocess as sp

    '
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: divideThemInt(int, int) -> (int, int)
  solution: "def divideThemInt(num_a, num_b):\n    return (num_a / num_b, num_a %\
    \ num_b)\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that divides two integers and returns a tuple with the first\
    \ value equal to the integer diviion result, and teh second value equal to the\
    \ remainder. \n\nE.g:\ndef divideThemInt(num_a, num_b):\n    #your code here\n\
    \    return (sum_of_them, remainder)\n"
  tier: 20
  title: basic_math_4
  unittests:
    test1:
    - int(7)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: 59890270-b868-11e7-b66a-ac220b2cb439
5f9eee8e-b21b-11e7-b1e7-ac220b2cb439:
  history:
    ab7511ee456ce56e64d69141b7e2241b:
      code: "def add(aaa,bbb):\n    x= aaa+bbb\n    return x"
      likes: 0
      memory: 0
      pep8: 0
      size: 0
      speed: 0
  imports: 'from random import randint, seed

    import subprocess as sp

    '
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: remainder(int, int) -> int
  solution: "def remainder(a, b):\n    the_remainder = a%b\n    return the_remainder\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that takes 2 integers as parameters and returns the remainder\n\
    from dividing the first number, \"a\", into the second number, \"b\". \n\nE.g:\n\
    def remainder(a, b):\n    #your code here\n    return the_remainder\n"
  tier: 20
  title: basic_math_2
  unittests:
    test1:
    - int(3)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: 5f9eee8e-b21b-11e7-b1e7-ac220b2cb439
6dd15320-b9e6-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: smallestOfList(list of numbers) -> number
  solution: "def smallestOfList(some_nums):\n    smallest = some_nums[0]\n    for\
    \ num in some_nums:\n        if num<smallest:\n            smallest = num\n  \
    \  return num\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called smallestOfList that accepts a list or tuple of numbers\
    \ \nand returns the smallest number found in the list.\n\nE.g:\ndef smallestOfList(some_nums):\n\
    \    # do stuff here\n    return the_smallest\n"
  tier: 21
  title: lists_2
  unittests:
    test1:
    - - 1
      - 2
      - 3
      - 4
      - 5
    test2:
    - - -5
      - 2.2
      - 999
      - -1000.0
    test3:
    - (1, -2, 4, -6, 123.1)
  uuid: 6dd15320-b9e6-11e7-b66a-ac220b2cb439
70f341c2-b869-11e7-b66a-ac220b2cb439:
  history: {}
  imports: 'from random import randint, seed

    import subprocess as sp

    '
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: convertCToF(int) -> float
  solution: "def convertCToF(temp_in_c):\n    return temp_in_c/5.0 + 32.0/9.0\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that accepts a temperature in Centigrade and returns an\n\
    equivelant temperature in Farenheight. \n\nThe equation for this is (f = c/5 +\
    \ 32/9)\n\nE.g:\ndef convertCToF(temp_in_c):\n    #your code here\n    return\
    \ temp_in_f\n"
  tier: 20
  title: basic_math_6
  unittests:
    test1:
    - int(7)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: 70f341c2-b869-11e7-b66a-ac220b2cb439
714d9cf0-b9f2-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: twosTruthiness(bool, bool, bool, bool) -> string
  solution: "def twosTruthiness(obj0, obj1, obj2, obj3):\n    items = (obj0, obj1,\
    \ obj2, obj3)\n    count = len([o for o in items if o == True])\n    if count\
    \ == 2:\n        resulting_word = \"twos\"\n    elif count == 3:\n        resulting_word\
    \ = \"threes\"\n    else:\n        resulting_word = \"foobar\"\n    return resulting_word\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Create a function called twosTruthiness that is given four boolean values.\n\
    if any two of the four are True, then return \"twos\".  If any three of them are\n\
    True, then return \"threes\", if less than two or four of them are True, then\n\
    return \"foobar\"\n\nE.g:\ndef twosTruthiness(obj, obj, obj, obj):\n    #your\
    \ code here\n    return resulting_word\n"
  tier: 25
  title: branching_2
  unittests:
    test1:
    - (True, True, False, False)
    test2:
    - (False, True, False, True)
    test3:
    - (True, True, False, True)
    test4:
    - (True, True, True, True)
  uuid: 714d9cf0-b9f2-11e7-b66a-ac220b2cb439
71c30c8c-b86d-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: getIndexOf(string, string) -> int
  solution: "def getIndexOf(word, search_string):\n    if word in search_string:\n\
    \        return search_string.index(word)\n    else:\n        return -1\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Wirte a functuion called \"getIndexOf\" that returns the index of a given\
    \ word\ninside of a given string.  If the word is not present, it returns a -1.\
    \ \n\nFor exmaple, if the word is \"pizza\", and the search_string is \"there\
    \ is pizza on the plate\", then the index is 9.\n\nE.g:\ndef getIndexOf(word,\
    \ search_string):\n    # do stuff here\n    return index \n"
  tier: 23
  title: strings_8
  unittests:
    test1:
    - one_two_three_four_five
    test2:
    - _______
    test3:
    - 1_2_3__five_six!''_seven
  uuid: 71c30c8c-b86d-11e7-b66a-ac220b2cb439
729fc794-b9ee-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: printGivenKeys(dict, list)
  solution: "def checkKeysExists(the_dict, keys):\n    out = {}\n    for key in keys:\n\
    \        out[key] = key in the_dict\n    return out\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called printGivenKeys that is given a dictionary and a list\n\
    of keys to look for in teh dictionary.  For each item in the list, the function\n\
    prints the item and the value associated with it in the provided dictionary.\n\
    If the item is not in the dictionary, None is used for the value. \n\nAs an example,\
    \ if given {'a': 0, 'b': 1} and ['a', 'c'] for keys, it would \nprint:\na, 0\n\
    c, None\n\nE.g:\ndef printGivenKeys(a_dictionary, some_keys):\n    # do stuff\
    \ here\n    # return nothing\n"
  tier: 22
  title: dictionaries_7
  unittests:
    test1:
    - a: 12
      b: 2
    - - a
      - c
      - d
    test2:
    - a: 1
      b: 2
    - ()
  uuid: 729fc794-b9ee-11e7-b66a-ac220b2cb439
79d269b4-b9e8-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: removeFromSet(set, obj) -> tuple
  solution: "def removeFromSet(a_set, an_obj):\n    if an_obj in a_set:\n        a_set.remove(an_obj)\n\
    \    return tuple(a_set)\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called removeFromSet that accepts a set and an object. \
    \ If\nthe object exists in the set, then it is removed.  The resulting set is\n\
    converted to a tuple and returned. \n\nE.g:\ndef removeFromSet(a_set, an_obj):\n\
    \    # do stuff here\n    return new_tuple\n"
  tier: 21
  title: sets_4
  unittests:
    test1:
    - - asfd
      - b
      - b
      - c
      - b
      - 1
      - 2
      - b
      - a
  uuid: 79d269b4-b9e8-11e7-b66a-ac220b2cb439
88c88c44-bab2-11e7-b66a-ac220b2cb439:
  history: {}
  imports:
  - sys
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: loopStarPyramid()
  solution: "def loopStarPyramid():\n    import sys\n    for depth in (0, 1, 2, 3,\
    \ 4, 3, 2, 1, 0):\n        sys.stdout.write('*')\n        for star in range(depth):\n\
    \            sys.stdout.write(' *')\n        sys.stdout.write('\\n')\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Create a function called loopStarPyramid that uses nested for-loops to\n\
    print the following pattern:\n\n*\n* *\n* * *\n* * * *\n* * * * *\n* * * *\n*\
    \ * *\n* *\n*\n\nE.g:\ndef loopStarPyramid():\n    #your code here\n    #return\
    \ nothing\n"
  tier: 26
  title: loops_1
  unittests:
    test1: null
  uuid: 88c88c44-bab2-11e7-b66a-ac220b2cb439
95e1367a-b53e-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: mergeToDict(list, list) -> dict
  solution: "def mergeToDict(keys, values):\n    resulting_dict = dict(zip(keys, values))\n\
    \    return resulting_dict\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Given a list of keys and a list of corresponding values, create a dictionary\n\
    containing them and return it as output. You may assume that both lists will\n\
    always be the same length.\n\nFor example, if the keys were ('color', 'flavor',\
    \ 'texture') and the values\nwere ('red', 'sour', and 'rough'), the dictionary\
    \ would look like:\n{'color': 'red', 'flavor': 'sour', 'texture': 'rough'}\n\n\
    E.g:\ndef mergeToDict(keys, values):\n    #your code here\n    return resulting_dict\n"
  tier: 24
  title: dictionaries_3
  unittests:
    test1:
    - (1, 2, 3, 4)
    - (5, 6, 7, 8)
    test2:
    - ('1', '2', '3', '4')
    - ('a', 'b', 'c', 'd')
    test3:
    - ('1', '2', '3', '4')
    - ([1,], [2,], [3,], [4,])
  uuid: 95e1367a-b53e-11e7-b1e7-ac220b2cb439
a13d84a0-b486-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: returnWithQuotes() -> string
  solution: "def returnWithQuotes():\n    my_string = \"\"\"'It's modulus, \"%\",\
    \ not division, \"/\", or escaping \"\\\"!'\"\"\"\n    return my_string\n    \n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called returnWithQuotes that takes no arguments and, when\n\
    called, returns the following text (no whitespace on the ends), but with all quotes\
    \ shown included in the string:\n\n    'It's modulus, \"%\", not division, \"\
    /\", or escaping \"\\\"!'\n\nE.g:\ndef returnWithQuotes():\n    # do stuff here\n\
    \    return my_silly_string\n"
  tier: 21
  title: strings_1
  unittests:
    test1: null
  uuid: a13d84a0-b486-11e7-b1e7-ac220b2cb439
a4e079f8-bab4-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: getFibThrough(int) -> list of int
  solution: "def getFibThrough(through_num):\n    nums = [0, 1]\n    while nums[-1]\
    \ < through_num:\n        nums.append(sum(nums[-2:]))\n    if nums[-1] == through_num:\n\
    \        return nums[1:]\n    return nums[1:-1]\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Create a function called getFibThrough that accepts an integer and returns\n\
    the fibonacci series up to the given number in the form of a list. \n\nExample:\
    \  1, 1, 2, 3, 5, 8, 13, ...\n\nE.g:\ndef getFibThrough(through_num):\n    #your\
    \ code here\n    return fib_series\n"
  tier: 26
  title: loops_2
  unittests:
    test1:
    - 5
    test2:
    - 6
    test3:
    - 21
    test4:
    - 999
  uuid: a4e079f8-bab4-11e7-b66a-ac220b2cb439
c9e26c9a-b544-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: undToShortCSV(string) -> string
  solution: "def listToCSV(words_list):\n    csv_string = ','.join(words_list)\n \
    \   return csv_string\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"undToShortCSV\" that takes a string with words\n\
    separated by underscores, \"_\", changes the underscores to commas, \",\", and\n\
    returns only the first three words.  You can assume that there will always\nbe\
    \ more than three words separated by underscore given. \n\nFor exmaple, \"one_two_three_four_five\"\
    \ becomes \"one,two,three\".\n\nE.g:\ndef undToShortCSV(und_sep_words):\n    #\
    \ do stuff here\n    return csv_sep_words\n"
  tier: 23
  title: strings_7
  unittests:
    test1:
    - one_two_three_four_five
    test2:
    - _______
    test3:
    - 1_2_3__five_six!''_seven
  uuid: c9e26c9a-b544-11e7-b1e7-ac220b2cb439
ca7ae886-b485-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: justEvenChars(string) -> (string)
  solution: "def justEvenChars(foo):\n    return foo[::2]\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"justEvenChars\" that takes a string as an argument\
    \ and\nreturns only even numbered characters from the string. If the string is\
    \ \"coolio\", the result would be \"coi\", treating the zeroth characte as even\
    \ (0%2==0). \n\nE.g:\ndef justEvenChars(foo):\n    # do stuff here\n    return\
    \ foo\n"
  tier: 22
  title: strings_4
  unittests:
    test1:
    - ' ro3! T2is is cool '
    test2:
    - ' ABCDS'
    test3:
    - 'zABCDS '
    test4:
    - '123456789'
  uuid: ca7ae886-b485-11e7-b1e7-ac220b2cb439
db2afcca-b868-11e7-b66a-ac220b2cb439:
  history: {}
  imports: 'from random import randint, seed

    import subprocess as sp

    '
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: divideThem(int, int) -> float
  solution: "def divideThem(num_a, num_b):\n    return float(num_a) / float(num_b)\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that divides two integers and returns a floating point result.\n\
    Note: the result should be a float even if the division has no remainder...\n\n\
    E.g:\ndef divideThem(num_a, num_b):\n    #your code here\n    return the_result\n"
  tier: 20
  title: basic_math_5
  unittests:
    test1:
    - int(7)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: db2afcca-b868-11e7-b66a-ac220b2cb439
db79345a-b537-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: pocketContents() -> dict
  solution: "def pocketContents():\n    inventory = {\n        'gold' : 500,\n   \
    \     'pouch' : ['flint', 'twine', 'gemstone'],\n        'backpack' : ['xylophone','dagger',\
    \ 'bedroll','bread loaf']\n    }\n    inventory['pocket'] = ['seashell']\n   \
    \ return inventory\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Given the following dictionary called \"inventory\", modify the pocketContents\n\
    function to add a 'pocket' into the dictionary with contents 'seashell'\n(a single\
    \ string in a list).\n\nE.g:\ndef pocketContents():\n    inventory = {\n     \
    \   'gold' : 500,\n        'pouch' : ['flint', 'twine', 'gemstone'],\n       \
    \ 'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']\n    }\n\n    return\
    \ inventory\n"
  tier: 24
  title: dictionaries_1
  unittests:
    test1:
    - ' rofl this is cool '
    test2:
    - ' ABCDS'
    test3:
    - 'zABCDS '
  uuid: db79345a-b537-11e7-b1e7-ac220b2cb439
dcd90164-b9e6-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: convTupleUnique(list) -> tuple
  solution: "def convTupleUnique(some_items):\n    return tuple(set(some_items))\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called convTupleUnique(list) that accepts a list of objects\n\
    and returns a tuple (not a list) with only the unique items from the list. \n\
    Order of the returned list is not important.\n\nE.g:\ndef convTupleUnique(some_items):\n\
    \    # do stuff here\n    return unique_items\n"
  tier: 21
  title: sets_1
  unittests:
    test1:
    - - asfd
      - b
      - b
      - c
      - b
      - 1
      - 2
      - b
      - a
  uuid: dcd90164-b9e6-11e7-b66a-ac220b2cb439
dee69878-b4e5-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: reverseOrder(string) -> string
  solution: "def reverseOrder(foo):\n    foo = foo.strip()\n    foo.split()\n    foo\
    \ = foo[::-1]\n    foo = \" \".join(foo)\n    return foo\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"reverseOrder\" that takes a string as an argument\
    \ and\nreturns another string with all of the whitespace delimetered words in\
    \ the\nreverse order, not taking any special consideration for number/symbols.\
    \  KISS.\nIf the string, \" one1 tw_o thREE four!\" is passed in, \"four! thREE\
    \ tw_0 one1\"\nwould be returned.  Strip any whitespace from the ends of hte given\
    \ string.\n\nE.g:\ndef reverseOrder(foo):\n    # do stuff here\n    return foo\n"
  tier: 22
  title: strings_5
  unittests:
    test1:
    - ro3! T2is is cool
    test2:
    - ' ABCDS'
    test3:
    - zABCDS one two three!
    test4:
    - 123456789 asdf ASDF 4 _ 123 nine? ""
  uuid: dee69878-b4e5-11e7-b1e7-ac220b2cb439
e13f7da8-b484-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: firstHalfLower(string) -> string
  solution: "def firstHalfLower(foo):\n    length = int(len(foo) / 2)\n    result\
    \ = foo[:length].lower()\n    assert(len(result) * 2 <= len(foo))\n    return\
    \ result\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"firstHalfLower\" that takes a string as an argument\
    \ and\nreturns the first half of the string, all lower case. When calculating\
    \ how many\ncharacters of the string to return, round down - an 11 character string\
    \ would\nresult in 5 characters being returned.\n\nE.g:\ndef firstHalfLower(foo):\n\
    \    # do stuff here\n    return foo\n"
  tier: 22
  title: strings_3
  unittests:
    test1:
    - ' ro3! T2is is cool '
    test2:
    - ' ABCDS'
    test3:
    - 'zABCDS '
    test4:
    - '123456789'
  uuid: e13f7da8-b484-11e7-b1e7-ac220b2cb439
e304e426-b9e7-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: createSet(obj, obj, obj, obj, obj) -> set
  solution: "def createSet(obj1=None, obj2=None, obj3=None, obj4=None, obj5=None):\n\
    \    new_set = set()\n    for obj in (obj1, obj2, obj3, obj4, obj5):\n       \
    \ if obj != None:\n            new_set.add(obj)\n    return new_set\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called createSet that accepts up to five objects, adds them\n\
    into a set, and returns a set of those objects. Hint: \"set\" is a data type.\
    \ \nDo not add any of the objects fo the set if the object is equal to the None\n\
    object.\n\nE.g:\ndef createSet(obj1=None, obj2=None, obj3=None, obj4=None, obj5=None):\n\
    \    # do stuff here\n    return new_set\n"
  tier: 21
  title: sets_3
  unittests:
    test1:
    - - asfd
      - b
      - b
      - c
      - b
      - 1
      - 2
      - b
      - a
  uuid: e304e426-b9e7-11e7-b66a-ac220b2cb439
e4edc104-b9f1-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: getTruthiness(obj) -> string
  solution: "def getTruthiness(obj):\n    if obj:\n        resulting_word = \"tequilla\"\
    \n    else:\n        resulting_word = \"margarita\"\n    return resulting_word\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Create a function called getTruthiness that is given an objct and, if\nthat\
    \ object evaluates True, returns \"tequilla\", otherwise it returns,\n\"margarita\"\
    . \n\nE.g:\ndef getTruthiness(obj):\n    #your code here\n    return resulting_word\n"
  tier: 23
  title: branching_1
  unittests:
    test1:
    - true
    test2:
    - ''
    test3:
    - a
    test4:
    - ()
  uuid: e4edc104-b9f1-11e7-b66a-ac220b2cb439
f1e607ce-b9e5-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: sumAllItems(list of num) -> number
  solution: "def sumAllItmes(some_nums):\n    the_sum = 0.\n    for num in some_nums:\n\
    \        the_sum += num\n    return the_sum\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "write a function called sumAllItems that accepts a list or tuple of numbers,\
    \ \nsumms them, and returns the sum. \n\nE.g:\ndef sumAllItmes(some_nums):\n \
    \   # do stuff here\n    return the_sum\n"
  tier: 21
  title: lists_1
  unittests:
    test1:
    - - 1
      - 2
      - 3
      - 4
      - 5
    test2:
    - - -5
      - 2.2
      - 999
      - -1000.0
    test3:
    - (1, -2, 4, -6, 123.1)
  uuid: f1e607ce-b9e5-11e7-b66a-ac220b2cb439
f62bae50-b22f-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: 'from random import randint, seed

    import subprocess as sp

    '
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: toInt(float) -> int
  solution: "def toInt(a_float):\n    an_int = int(a_float)\n    return an_int\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that takes a floating point number and returns it\nas an\
    \ integer.\n\nE.g:\ndef toInt(a_float):\n    #your code here\n    return an_int\n"
  tier: 20
  title: basic_math_3
  unittests:
    test1:
    - int(7)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: f62bae50-b22f-11e7-b1e7-ac220b2cb439
ffeb899e-b471-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: strUpper(string) -> string
  solution: "def strUpper(foo):\n    return foo.strip().upper()\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"strUpper\" that takes a string as an argument and\n\
    returns the string without any whitespace on the ends and all upper case.\n\n\
    E.g:\ndef strUpper(foo):\n    # do stuff here\n    return foo\n"
  tier: 21
  title: strings_2
  unittests:
    test1:
    - ' rofl this is cool '
    test2:
    - ' ABCDS'
    test3:
    - 'zABCDS '
  uuid: ffeb899e-b471-11e7-b1e7-ac220b2cb439
