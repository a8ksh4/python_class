014cb494-b543-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: myPricesDict() -> dict
  solution: "def myPricesDict():\n    my_prices = {\"bananna\": 4, \"apple\": 2, \"\
    orange\": 1.5, \"pear\": 3}\n    return my_prices\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Put the following items into a prices dictionary and return it:\n    \"bananna\"\
    : 4,\n    \"apple\": 2,\n    \"orange\": 1.5,\n    \"pear\": 3\n\nE.g:\ndef myPricesDict():\n\
    \    #your code here\n    return my_prices\n"
  tier: 6
  title: dict_example_2
  unittests:
    test1: null
  uuid: 014cb494-b543-11e7-b1e7-ac220b2cb439
22041afa-b544-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: listToCSV(list) -> string
  solution: "def listToCSV(words_list):\n    csv_string = ','.join(words_list)\n \
    \   return csv_string\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"listToCSV\" that takes a list of strings and combines\n\
    them into a single string with all words separated by a comma: \",\".  For\nexample,\
    \ [\"one\", 'two', 'three'] becomes \"one,two,three\".\n\nE.g:\ndef listToCSV(words_list):\n\
    \    # do stuff here\n    return csv_string\n"
  tier: 22
  title: strings_6
  unittests:
    test1:
    - ('one', 'two', 'three')
    test2:
    - ('1', ',', ':', "fiftyfive")
  uuid: 22041afa-b544-11e7-b1e7-ac220b2cb439
4464b29f-86a1-4e4c-9261-f581d1b1c8e8:
  history:
    ab7511ee456ce56e64d69141b7e2241b:
      code: "def add(aaa,bbb):\n    x= aaa+bbb\n    return x"
      likes: 0
      memory: 0
      pep8: 0
      size: 0
      speed: 0
  imports: from random import randint, seed
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: addThem(int, int) -> int
  solution: "def addThem(num_a, num_b):\n    return num_a + num_b\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that takes 2 integers as parameter\nIt should return the\
    \ sum of the 2 integers.\n\nE.g. \ndef addThem(num_a, num_b):\n    #your code\
    \ here\n    return the_sum\n"
  tier: 20
  title: basic_math_1
  unittests:
    test1:
    - int(3)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: 4464b29f-86a1-4e4c-9261-f581d1b1c8e8
59890270-b868-11e7-b66a-ac220b2cb439:
  history: {}
  imports: 'from random import randint, seed

    import subprocess as sp

    '
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: divideThemInt(int, int) -> (int, int)
  solution: "def divideThemInt(num_a, num_b):\n    return (num_a / num_b, num_a %\
    \ num_b)\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that divides two integers and returns a tuple with the first\
    \ value equal to the integer diviion result, and teh second value equal to the\
    \ remainder. \n\nE.g:\ndef divideThemInt(num_a, num_b):\n    #your code here\n\
    \    return (sum_of_them, remainder)\n"
  tier: 20
  title: basic_math_4
  unittests:
    test1:
    - int(7)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: 59890270-b868-11e7-b66a-ac220b2cb439
5f9eee8e-b21b-11e7-b1e7-ac220b2cb439:
  history:
    ab7511ee456ce56e64d69141b7e2241b:
      code: "def add(aaa,bbb):\n    x= aaa+bbb\n    return x"
      likes: 0
      memory: 0
      pep8: 0
      size: 0
      speed: 0
  imports: 'from random import randint, seed

    import subprocess as sp

    '
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: remainder(int, int) -> int
  solution: "def remainder(a, b):\n    the_remainder = a%b\n    return the_remainder\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that takes 2 integers as parameters and returns the remainder\n\
    from dividing the first number, \"a\", into the second number, \"b\". \n\nE.g:\n\
    def remainder(a, b):\n    #your code here\n    return the_remainder\n"
  tier: 20
  title: basic_math_2
  unittests:
    test1:
    - int(3)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: 5f9eee8e-b21b-11e7-b1e7-ac220b2cb439
70f341c2-b869-11e7-b66a-ac220b2cb439:
  history: {}
  imports: 'from random import randint, seed

    import subprocess as sp

    '
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: convertCToF(int) -> float
  solution: "def convertCToF(temp_in_c):\n    return temp_in_c/5.0 + 32.0/9.0\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that accepts a temperature in Centigrade and returns an\n\
    equivelant temperature in Farenheight. \n\nThe equation for this is (f = c/5 +\
    \ 32/9)\n\nE.g:\ndef convertCToF(temp_in_c):\n    #your code here\n    return\
    \ temp_in_f\n"
  tier: 20
  title: basic_math_6
  unittests:
    test1:
    - int(7)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: 70f341c2-b869-11e7-b66a-ac220b2cb439
71c30c8c-b86d-11e7-b66a-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: getIndexOf(string, string) -> int
  solution: "def getIndexOf(word, search_string):\n    if word in search_string:\n\
    \        return search_string.index(word)\n    else:\n        return -1\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Wirte a functuion called \"getIndexOf\" that returns the index of a given\
    \ word\ninside of a given string.  If the word is not present, it returns a -1.\
    \ \n\nFor exmaple, if the word is \"pizza\", and the search_string is \"there\
    \ is pizza on the plate\", then the index is 9.\n\nE.g:\ndef getIndexOf(word,\
    \ search_string):\n    # do stuff here\n    return index \n"
  tier: 23
  title: strings_8
  unittests:
    test1:
    - one_two_three_four_five
    test2:
    - _______
    test3:
    - 1_2_3__five_six!''_seven
  uuid: 71c30c8c-b86d-11e7-b66a-ac220b2cb439
95e1367a-b53e-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: mergeToDict(list, list) -> dict
  solution: "def mergeToDict(keys, values):\n    resulting_dict = dict(zip(keys, values))\n\
    \    return resulting_dict\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Given a list of keys and a list of corresponding values, create a dictionary\n\
    containing them and return it as output. You may assume that both lists will\n\
    always be the same length.\n\nFor example, if the keys were ('color', 'flavor',\
    \ 'texture') and the values\nwere ('red', 'sour', and 'rough'), the dictionary\
    \ would look like:\n{'color': 'red', 'flavor': 'sour', 'texture': 'rough'}\n\n\
    E.g:\ndef mergeToDict(keys, values):\n    #your code here\n    return resulting_dict\n"
  tier: 6
  title: dict_example_3
  unittests:
    test1:
    - (1, 2, 3, 4)
    - (5, 6, 7, 8)
    test2:
    - ('1', '2', '3', '4')
    - ('a', 'b', 'c', 'd')
    test3:
    - ('1', '2', '3', '4')
    - ([1,], [2,], [3,], [4,])
  uuid: 95e1367a-b53e-11e7-b1e7-ac220b2cb439
a13d84a0-b486-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: returnWithQuotes() -> string
  solution: "def returnWithQuotes():\n    my_string = \"\"\"'It's modulus, \"%\",\
    \ not division, \"/\", or escaping \"\\\"!'\"\"\"\n    return my_string\n    \n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called returnWithQuotes that takes no arguments and, when\n\
    called, returns the following text (no whitespace on the ends), but with all quotes\
    \ shown included in the string:\n\n    'It's modulus, \"%\", not division, \"\
    /\", or escaping \"\\\"!'\n\nE.g:\ndef returnWithQuotes():\n    # do stuff here\n\
    \    return my_silly_string\n"
  tier: 21
  title: strings_1
  unittests:
    test1: null
  uuid: a13d84a0-b486-11e7-b1e7-ac220b2cb439
c9e26c9a-b544-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: undToShortCSV(string) -> string
  solution: "def listToCSV(words_list):\n    csv_string = ','.join(words_list)\n \
    \   return csv_string\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"undToShortCSV\" that takes a string with words\n\
    separated by underscores, \"_\", changes the underscores to commas, \",\", and\n\
    returns only the first three words.  You can assume that there will always\nbe\
    \ more than three words separated by underscore given. \n\nFor exmaple, \"one_two_three_four_five\"\
    \ becomes \"one,two,three\".\n\nE.g:\ndef undToShortCSV(und_sep_words):\n    #\
    \ do stuff here\n    return csv_sep_words\n"
  tier: 23
  title: strings_7
  unittests:
    test1:
    - one_two_three_four_five
    test2:
    - _______
    test3:
    - 1_2_3__five_six!''_seven
  uuid: c9e26c9a-b544-11e7-b1e7-ac220b2cb439
ca7ae886-b485-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: justEvenChars(string) -> (string)
  solution: "def justEvenChars(foo):\n    return foo[::2]\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"justEvenChars\" that takes a string as an argument\
    \ and\nreturns only even numbered characters from the string. If the string is\
    \ \"coolio\", the result would be \"coi\", treating the zeroth characte as even\
    \ (0%2==0). \n\nE.g:\ndef justEvenChars(foo):\n    # do stuff here\n    return\
    \ foo\n"
  tier: 22
  title: strings_4
  unittests:
    test1:
    - ' ro3! T2is is cool '
    test2:
    - ' ABCDS'
    test3:
    - 'zABCDS '
    test4:
    - '123456789'
  uuid: ca7ae886-b485-11e7-b1e7-ac220b2cb439
db2afcca-b868-11e7-b66a-ac220b2cb439:
  history: {}
  imports: 'from random import randint, seed

    import subprocess as sp

    '
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: divideThem(int, int) -> float
  solution: "def divideThem(num_a, num_b):\n    return float(num_a) / float(num_b)\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that divides two integers and returns a floating point result.\n\
    Note: the result should be a float even if the division has no remainder...\n\n\
    E.g:\ndef divideThem(num_a, num_b):\n    #your code here\n    return the_result\n"
  tier: 20
  title: basic_math_5
  unittests:
    test1:
    - int(7)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: db2afcca-b868-11e7-b66a-ac220b2cb439
db79345a-b537-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: pocketContents() -> dict
  solution: "def pocketContents():\n    inventory = {\n        'gold' : 500,\n   \
    \     'pouch' : ['flint', 'twine', 'gemstone'],\n        'backpack' : ['xylophone','dagger',\
    \ 'bedroll','bread loaf']\n    }\n    inventory['pocket'] = ['seashell']\n   \
    \ return inventory\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Given the following dictionary called \"inventory\", modify the pocketContents\n\
    function to add a 'pocket' into the dictionary with contents 'seashell'\n(a single\
    \ string in a list).\n\nE.g:\ndef pocketContents():\n    inventory = {\n     \
    \   'gold' : 500,\n        'pouch' : ['flint', 'twine', 'gemstone'],\n       \
    \ 'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']\n    }\n\n    return\
    \ inventory\n"
  tier: 6
  title: dict_example_1
  unittests:
    test1:
    - ' rofl this is cool '
    test2:
    - ' ABCDS'
    test3:
    - 'zABCDS '
  uuid: db79345a-b537-11e7-b1e7-ac220b2cb439
dee69878-b4e5-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: reverseOrder(string) -> string
  solution: "def reverseOrder(foo):\n    foo = foo.strip()\n    foo.split()\n    foo\
    \ = foo[::-1]\n    foo = \" \".join(foo)\n    return foo\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"reverseOrder\" that takes a string as an argument\
    \ and\nreturns another string with all of the whitespace delimetered words in\
    \ the\nreverse order, not taking any special consideration for number/symbols.\
    \  KISS.\nIf the string, \" one1 tw_o thREE four!\" is passed in, \"four! thREE\
    \ tw_0 one1\"\nwould be returned.  Strip any whitespace from the ends of hte given\
    \ string.\n\nE.g:\ndef reverseOrder(foo):\n    # do stuff here\n    return foo\n"
  tier: 22
  title: strings_5
  unittests:
    test1:
    - ro3! T2is is cool
    test2:
    - ' ABCDS'
    test3:
    - zABCDS one two three!
    test4:
    - 123456789 asdf ASDF 4 _ 123 nine? ""
  uuid: dee69878-b4e5-11e7-b1e7-ac220b2cb439
e13f7da8-b484-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: firstHalfLower(string) -> string
  solution: "def firstHalfLower(foo):\n    length = int(len(foo) / 2)\n    result\
    \ = foo[:length].lower()\n    assert(len(result) * 2 <= len(foo))\n    return\
    \ result\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"firstHalfLower\" that takes a string as an argument\
    \ and\nreturns the first half of the string, all lower case. When calculating\
    \ how many\ncharacters of the string to return, round down - an 11 character string\
    \ would\nresult in 5 characters being returned.\n\nE.g:\ndef firstHalfLower(foo):\n\
    \    # do stuff here\n    return foo\n"
  tier: 22
  title: strings_3
  unittests:
    test1:
    - ' ro3! T2is is cool '
    test2:
    - ' ABCDS'
    test3:
    - 'zABCDS '
    test4:
    - '123456789'
  uuid: e13f7da8-b484-11e7-b1e7-ac220b2cb439
f62bae50-b22f-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: 'from random import randint, seed

    import subprocess as sp

    '
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: seed({seed})
  signature: toInt(float) -> int
  solution: "def toInt(a_float):\n    an_int = int(a_float)\n    return an_int\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function that takes a floating point number and returns it\nas an\
    \ integer.\n\nE.g:\ndef toInt(a_float):\n    #your code here\n    return an_int\n"
  tier: 20
  title: basic_math_3
  unittests:
    test1:
    - int(7)
    - int(5)
    test2:
    - int(-3)
    - int(0)
    test3:
    - randint(-100,100)
    - randint(-100,100)
    test4_x4:
    - randint(-1000,1000)
    - randint(-1,1)
  uuid: f62bae50-b22f-11e7-b1e7-ac220b2cb439
ffeb899e-b471-11e7-b1e7-ac220b2cb439:
  history: {}
  imports: ''
  ratings:
    challenging: 0
    interesting: 0
    useful: 0
  setup: ''
  signature: strUpper(string) -> string
  solution: "def strUpper(foo):\n    return foo.strip().upper()\n"
  successes: 1
  tags:
  - sample
  - arithmatic
  teardown: ''
  text: "Write a function called \"strUpper\" that takes a string as an argument and\n\
    returns the string without any whitespace on the ends and all upper case.\n\n\
    E.g:\ndef strUpper(foo):\n    # do stuff here\n    return foo\n"
  tier: 21
  title: strings_2
  unittests:
    test1:
    - ' rofl this is cool '
    test2:
    - ' ABCDS'
    test3:
    - 'zABCDS '
  uuid: ffeb899e-b471-11e7-b1e7-ac220b2cb439
