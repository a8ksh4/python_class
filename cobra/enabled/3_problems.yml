addThem:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append(2 == self._function(1, 1))

    self.test_results.append(1 == self._function(-5.1, 6.1))'
  pretest: ''
  setup: ''
  signature: 'def addThem(a, b): ->     return the_sum'
  solution: "def addThem(a, b):\n    the_sum = a + b\n    return the_sum"
  tags: ''
  teardown: ''
  text: 'Write a function called addThem that accepts two numbers and returns

    their sum.'
  title: basic_math_1
  unittests: {}
carmenFound:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append(''atlanta'' == self._function({{''atlanta'':
    True, ''memphis'': False}}))

    self.test_results.append(''memphis'' == self._function({{''atlanta'': False, ''memphis'':
    True}}))'
  pretest: ''
  setup: ''
  signature: 'def carmenFound(cities): ->             return city'
  solution: "def carmenFound(cities):\n    for city in cities:\n        if cities[city]\
    \ == True:\n            return city"
  tags: ''
  teardown: ''
  text: 'Create a function called carmenFound that is given a dictionary with a

    list of city names as keys, each associated with a boolean value

    indicating whether or not Carmen is in the city.  Return the name of the

    city Carmen is found in!

    The cities dictionary will look like: {{''city_a'': False, ''city_b''...}}'
  title: branching_3
  unittests: {}
checkKeyExists:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append(self._function({{''a'': 0, ''b'': 1}}, ''a''))

    self.test_results.append(not self._function({{''a'': 0, ''b'': 1}}, ''z''))

    self.test_results.append(not self._function({{''a'': 0, ''b'': 1}}, 1))

    self.test_results.append(not self._function({{''a'': 0, ''b'': 1}}, 0))'
  pretest: ''
  setup: ''
  signature: 'def checkKeyExists(a_dictionary, the_key): ->     return exists_bool'
  solution: "def checkKeyExists(a_dictionary, the_key):\n    exists_bool = the_key\
    \ in a_dictionary\n    return exists_bool"
  tags: ''
  teardown: ''
  text: 'Write a function called checkKeyExists that is given a dictionary and a

    key and returns True if the key exists in the dictionary or False if it

    does not.'
  title: dictionaries_5
  unittests: {}
checkKeysExist:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'ans = {{''z'': True, ''c'': False}}

    self.test_results.append(ans.items() == self._function(((''z'',0), (''b'', 1)),
    (''z'', ''c'')).items())

    self.test_results.append((len(self._function({{''z'': 0, ''b'': 1}}, [''f'',]).keys())
    == 1))'
  pretest: ''
  setup: ''
  signature: 'def checkKeysExist(a_dictionary, some_keys): ->     return out'
  solution: "def checkKeysExist(a_dictionary, some_keys):\n    if isinstance(a_dictionary,\
    \ tuple):\n        a_dictionary = dict(a_dictionary)\n    out = {{}}\n    for\
    \ key in some_keys:\n        out[key] = key in a_dictionary\n    return out"
  tags: ''
  teardown: ''
  text: 'Write a function called checkKeysExist that is given a dictionary and a

    list of keys to look for in teh dictionary.  The function returns a new

    dictionary containing each key in the provided list with an associated

    boolean value indicating whether or not the key from the list was found

    in the given dictionary.

    As an example, if given {{''a'': 0, ''b'': 1}} and [''a'', ''c''] for keys, the

    output would be {{''a'': True, ''c'': False}}.'
  title: dictionaries_6
  unittests: {}
convTupleUnique:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'items = (9, 1, 1, 9, 2, 3, 4, 4, 5)

    res = self._function(items)

    self.test_results.append(sorted(res) == sorted(set(items)))'
  pretest: ''
  setup: ''
  signature: 'def convTupleUnique(some_items): ->     return unique_tuple'
  solution: "def convTupleUnique(some_items):\n    unique_tuple = tuple(set(some_items))\n\
    \    return unique_tuple"
  tags: ''
  teardown: ''
  text: 'Write a function called convTupleUnique(list) that accepts a list of

    objects and returns a tuple (not a list) with only the unique items from

    the list.  Order of the returned list is not important.'
  title: sets_1
  unittests: {}
convTupleUniqueOrder:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'items = (1, 1, 2, 3, 4, 4, 5)

    res = convTupleUnique(items)

    self.test_results.append((1, 2, 3, 4, 5) == res)'
  pretest: ''
  setup: ''
  signature: 'def convTupleUniqueOrder(some_items): ->     return tuple(out)'
  solution: "def convTupleUniqueOrder(some_items):\n    out = []\n    for item in\
    \ some_items:\n        if item in out:\n            continue\n        out.append(item)\n\
    \    return tuple(out)"
  tags: ''
  teardown: ''
  text: 'Write a function called convTupleUniqueOrder(list) that accepts a list of

    objects and returns a tuple (not a list) with only the unique items from

    the list. Order of the returned tuple IS important. Order from the

    original list should be preserved; the first time an object is observed

    in the given list, it is in the returned tuple, and subsequent occurences

    are ignored.'
  title: sets_2
  unittests: {}
convertCToF:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append(20/5.0 + 32.0/9.0 == self._function(20))

    self.test_results.append(-10/5.0 + 32.0/9.0 == self._function(-10))'
  pretest: ''
  setup: ''
  signature: 'def convertCToF(temp_in_c): ->     return temp_in_f'
  solution: "def convertCToF(temp_in_c):\n    temp_in_f = temp_in_c/5.0 + 32.0/9.0\n\
    \    return temp_in_f"
  tags: ''
  teardown: ''
  text: 'Write a function called convertCToF that accepts a temperature in

    centigrade and returns the equivelant temperature in Farenheight.

    The equation for this is: (f = c/5 + 32/9)'
  title: basic_math_5
  unittests: {}
createSet:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append(set((1, 2, 3)) == self._function(obj2=1, obj3=2,
    obj4=3, obj5=3))

    self.test_results.append(set((1, 2, 3)) == self._function(obj2=1, obj3=2, obj5=3))

    self.test_results.append(set() == self._function(None, None, None))

    self.test_results.append(set() == self._function())'
  pretest: ''
  setup: ''
  signature: 'def createSet(obj1=None, obj2=None, obj3=None, obj4=None, obj5=None):
    ->     return new_set'
  solution: "def createSet(obj1=None, obj2=None, obj3=None, obj4=None, obj5=None):\n\
    \    new_set = set()\n    for obj in (obj1, obj2, obj3, obj4, obj5):\n       \
    \ if obj != None:\n            new_set.add(obj)\n    return new_set"
  tags: ''
  teardown: ''
  text: 'Write a function called createSet that accepts up to five objects, adds

    them into a set, and returns a set of those objects. Hint: "set" is a

    data type.  Do not add any of the objects fo the set if the object is

    equal to the None object.'
  title: sets_3
  unittests: {}
divideThemInt:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append(2 == self._function(4.4, 2))

    self.test_results.append(2 == self._function(5, 2))'
  pretest: ''
  setup: ''
  signature: 'def divideThemInt(a, b): ->     return integer_result'
  solution: "def divideThemInt(a, b):\n    integer_result = int(a//b)\n    return\
    \ integer_result"
  tags: ''
  teardown: ''
  text: 'Write a function called divideThemIOnt that performs integer division

    on two given integers, a divided by b, and return the output as an integer.'
  title: basic_math_4
  unittests: {}
firstHalfLower:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'foo = "asdF12345"

    out = self._function(foo)

    self.test_results.append(foo[:len(foo)//2].lower() == out)

    self.test_results.append("" == self._function("A"))

    foo = "aS1dF2"

    out = self._function(foo)

    self.test_results.append(foo[:len(foo)//2].lower() == out)'
  pretest: ''
  setup: ''
  signature: 'def firstHalfLower(a_string): ->     return result'
  solution: "def firstHalfLower(a_string):\n    length = int(len(a_string) / 2)\n\
    \    result = a_string[:length].lower()\n    return result"
  tags: ''
  teardown: ''
  text: 'Write a function called "firstHalfLower" that takes a string as an

    argument and returns the first half of the string, all lower case. When

    calculating how many characters of the string to return, round down:

    An 11 character string would result in 5 characters being returned.'
  title: strings_3
  unittests: {}
getDictKeys:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append([1, 2, 3, 4] == self._function({{1: 5, 2: 6,
    3: 7, 4: 8}}))'
  pretest: ''
  setup: ''
  signature: 'def getDictKeys(a_dictionary): ->     return keys'
  solution: "def getDictKeys(a_dictionary):\n    keys = list(a_dictionary.keys())\n\
    \    return keys"
  tags: ''
  teardown: ''
  text: 'Write a function called getDictKeys that is given a dictionary and returns

    the keys in the dictionary as a list.'
  title: dictionaries_4
  unittests: {}
getIndexOf:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append(9 == self._function(''pizza'', ''there is pizza
    on the plate''))

    self.test_results.append(-1 == self._function(''PIZZA'', ''there is pizza on the
    plate''))'
  pretest: ''
  setup: ''
  signature: 'def getIndexOf(word, search_string): ->         return -1'
  solution: "def getIndexOf(word, search_string):\n    if word in search_string:\n\
    \        return search_string.index(word)\n    else:\n        return -1"
  tags: ''
  teardown: ''
  text: 'Wirte a functuion called "getIndexOf" that returns the index of a given

    word inside of a given string.  If the word is not present, it returns

    a -1.

    For exmaple, if the word is "pizza", and the search_string is:

    "there is pizza on the plate"

    then the index is 9.'
  title: strings_8
  unittests: {}
getTruthiness:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append("margarita" == self._function([]))

    self.test_results.append("tequilla" == self._function((1,)))

    self.test_results.append("margarita" == self._function(0))'
  pretest: ''
  setup: ''
  signature: 'def getTruthiness(obj): ->     return resulting_word'
  solution: "def getTruthiness(obj):\n    if obj:\n        resulting_word = \"tequilla\"\
    \n    else:\n        resulting_word = \"margarita\"\n    return resulting_word"
  tags: ''
  teardown: ''
  text: 'Write a function called getTruthiness that is given an object and, if

    that object evaluates to True, returns the string "tequilla", or otherwise

    returns the string "margarita".'
  title: branching_1
  unittests: {}
justEvenChars:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append(''zBD '' == self._function(''zABCDS ''))

    self.test_results.append(''13579'' == self._function(''123456789''))

    self.test_results.append('' o!Ti sco '' == self._function('' ro3! T2is is cool
    ''))'
  pretest: ''
  setup: ''
  signature: 'def justEvenChars(a_string): ->     return even_num_chars'
  solution: "def justEvenChars(a_string):\n    even_num_chars = a_string[::2]\n  \
    \  return even_num_chars"
  tags: ''
  teardown: ''
  text: 'Write a function called "justEvenChars" that takes a string as an

    argument and returns only even numbered characters from the string. If

    the string is "coolio", the result would be "coi", treating the zeroth

    characte as even (0%2==0).'
  title: strings_4
  unittests: {}
listToCSV:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'out = self._function([''one'', '' '', ''two'', '''', ''three'', ''''])

    self.test_results.append(out == "one, ,two,,three,")

    out = self._function([''1'', '','', '':'', ''fiftyfive''])

    self.test_results.append(out == ''1,,,:,fiftyfive'')'
  pretest: ''
  setup: ''
  signature: 'def listToCSV(words_list): ->     return csv_string'
  solution: "def listToCSV(words_list):\n    csv_string = ','.join(words_list)\n \
    \   return csv_string"
  tags: ''
  teardown: ''
  text: 'Write a function called "listToCSV" that takes a list of strings and

    combines them into a single string with all words separated by a

    comma: ",".  For example, ["one", ''two'', ''three''] becomes "one,two,three".'
  title: strings_6
  unittests: {}
mergeToDict:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'keys = [1, 2, 3, 4]

    vals = [5, 6, 7, 8]

    self.test_results.append({{1: 5, 2: 6, 3: 7, 4: 8}} == self._function(keys, vals))'
  pretest: ''
  setup: ''
  signature: 'def mergeToDict(keys, values): ->     return merged_dict'
  solution: "def mergeToDict(keys, values):\n    merged_dict = dict(zip(keys, values))\n\
    \    return merged_dict"
  tags: ''
  teardown: ''
  text: 'Write a function called mergeToDict that accepts a list of keys and a

    corresponding list ov values and returns a dictionary that has each

    key and value associated.

    For example, if the keys were (''color'', ''flavor'', ''texture'') and the values

    were (''red'', ''sour'', and ''rough''), the dictionary would look like:

    {{''color'': ''red'', ''flavor'': ''sour'', ''texture'': ''rough''}}'
  title: dictoinaries_3
  unittests: {}
myPricesDict:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'answer = {{''bananna'': 4, ''apple'': 2, ''orange'': 1.5, ''pear'': 3}}

    self.test_results.append(answer == self._function())'
  pretest: ''
  setup: ''
  signature: 'def myPricesDict(): ->     return prices_dict'
  solution: "def myPricesDict():\n    prices_dict = {{'bananna': 4, 'apple': 2, 'orange':\
    \ 1.5, 'pear': 3}}\n    return prices_dict"
  tags: ''
  teardown: ''
  text: 'Write a function called myPricesDict that puts the following items and

    prices into a dictionary and returns it:

    "bananna": 4,

    "apple": 2,

    "orange": 1.5,

    "pear": 3'
  title: dictoinaries_2
  unittests: {}
pocketContent:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'i = {{''gold'': 90, ''po'': [''fl'', ''te'', ''gon'']}}

    r = {{''gold'': 90, ''po'': [''fl'', ''te'', ''gon''], ''pocket'': [''seashell'']}}

    self.test_results.append(r == self._function(i))'
  pretest: ''
  setup: ''
  signature: 'def pocketContent(inventory): ->     return inventory'
  solution: "def pocketContent(inventory):\n    inventory['pocket'] = ['seashell']\n\
    \    return inventory"
  tags: ''
  teardown: ''
  text: 'Write a function called pocketContents that accepts an inventory

    dictiionary and adds a "pocket" to the inventory that contains a

    [''seashell'',].

    For example the inventory might look like this:

    {{''gold'': 400, ''pouch'': [''flint'', ''twine'', ''gemston'']}}

    And the returned inventory would look like:

    {{''gold'': 400, ''pouch'': [''flint'', ''twine''], ''pocket'': [''seashell'']}}'
  title: dictionaries_1
  unittests: {}
printGivenKeys:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self._function({{''a'': 0, ''b'': 1}}, ())

    self._function({{''a'': 0, ''b'': 1}}, (''z'', ''y'', ''a''))

    z, None

    y, None

    a, 0'
  pretest: ''
  setup: ''
  signature: 'def printGivenKeys(a_dictionary, some_keys): ->     #return nothing'
  solution: "def printGivenKeys(a_dictionary, some_keys):\n    for key in some_keys:\n\
    \        if key in a_dictionary:\n            print(\"{{}}, {{}}\".format(key,\
    \ a_dictionary[key]))\n        else:\n            print(\"{{}}, {{}}\".format(key,\
    \ None))\n    #return nothing"
  tags: ''
  teardown: ''
  text: 'Write a function called printGivenKeys that is given a dictionary and a

    list of keys to look for in teh dictionary.  For each item in the list,

    the function prints the item and the value associated with it in the

    provided dictionary.  If the item is not in the dictionary, None is used

    for the value. The sequence of the list should be preserve when printing.

    As an example, if given {{''a'': 0, ''b'': 1}} and [''c'', ''a''] for keys, it
    would

    print:

    c, None

    a, 0'
  title: dictionaries_7
  unittests: {}
remainder:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: self.test_results.append(4 == self._function(9, 5))
  pretest: ''
  setup: ''
  signature: 'def remainder(a, b): ->     return the_remainder'
  solution: "def remainder(a, b):\n    the_remainder = a % b\n    return the_remainder"
  tags: ''
  teardown: ''
  text: 'Write a function called remainder that accepts two numbers, a and b,

    and returns the remainder of a / b.'
  title: basic_math_2
  unittests: {}
removeFromSet:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'foo = (1, 2, 3, 4, 5, 6)

    new = self._function(set(foo), 6)

    self.test_results.append(sorted((1, 2, 3, 4, 5)) == sorted(new))

    new = self._function(set(foo), 7)

    self.test_results.append(sorted(new) == sorted(foo))'
  pretest: ''
  setup: ''
  signature: 'def removeFromSet(a_set, an_item): ->     return tuple(a_set)'
  solution: "def removeFromSet(a_set, an_item):\n    if an_item in a_set:\n      \
    \  a_set.remove(an_item)\n    return tuple(a_set)"
  tags: ''
  teardown: ''
  text: 'Write a function called removeFromSet that accepts a set and an item.

    If the item exists in the set, then it is removed.  The resulting set

    is converted to a tuple and returned.'
  title: sets_4
  unittests: {}
returnWithQuotes:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'foo = """''It''s modulus, "%", not division, "/", or escaping "\"!''"""

    out = self._function()

    self.test_results.append(foo == out)'
  pretest: ''
  setup: ''
  signature: 'def returnWithQuotes(): ->     return quotes'
  solution: "def returnWithQuotes():\n    quotes = \"\"\"'It's modulus, \"%\", not\
    \ division, \"/\", or escaping \"\\\"!'\"\"\"\n    return quotes"
  tags: ''
  teardown: ''
  text: 'Write a function called returnWithQuotes that takes no arguments and,

    when called, returns the following text (no whitespace on the ends),

    but with all quotes shown included in the string:

    ''It''s modulus, "%", not division, "/", or escaping "\"!'''
  title: strings_1
  unittests: {}
reverseOrder:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'out = self._function(''ro3! T2is is cool'')

    self.test_results.append(''cool is T2is ro3!'' == out)

    out = self._function('' ABCDS'')

    self.test_results.append(''ABCDS'' == out)

    out = self._function(''123456789 asdf ASDF 4 _ 123 nine? \"\"'')

    self.test_results.append(''\"\" nine? 123 _ 4 ASDF asdf 123456789'' == out)'
  pretest: ''
  setup: ''
  signature: 'def reverseOrder(a_string): ->     return switched'
  solution: "def reverseOrder(a_string):\n    switched = a_string.strip()\n    switched\
    \ = switched.split()\n    switched = switched[::-1]\n    switched = \" \".join(switched)\n\
    \    return switched"
  tags: ''
  teardown: ''
  text: 'Write a function called "reverseOrder" that takes a string as an

    argument and returns another string with all of the whitespace

    delimetered words in the reverse order, not taking any special

    consideration for number/symbols.  KISS.  If the string, " one1 tw_o

    thREE four!" is passed in, "four! thREE tw_0 one1" would be returned.

    Strip any whitespace from the ends of the given string.'
  title: strings_5
  unittests: {}
smallestOfList:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append(-5 == self._function((1, 2, 3, 4, -5)))

    self.test_results.append(1 == self._function((1, 2, 3, 4, -5), True))

    self.test_results.append(1 == self._function((2, 1, -1, 3, 4, -5), True))

    self.test_results.append(1 == self._function((-2, 1, -1, 3, 4, -5), True))'
  pretest: ''
  setup: ''
  signature: 'def smallestOfList(some_nums, absolute_val=False): ->     return smallest'
  solution: "def smallestOfList(some_nums, absolute_val=False):\n    smallest = None\n\
    \    small_loc = None\n    for n, num in enumerate(some_nums):\n        num =\
    \ abs(num) if absolute_val else num\n        if smallest == None or num < smallest:\n\
    \            smallest = num\n            small_loc = n\n    smallest = some_nums[small_loc]\n\
    \    return smallest"
  tags: ''
  teardown: ''
  text: 'Write a function called smallestOfList that accepts a list or tuple of

    numbers and returns the smallest number found in the list.

    However, if absolute value is set to True, it should return the number that

    has the smallest absolute value.

    If two numbers in the list both have an absolute value that is the

    smallest and the same, the first one encounterd should be returned.'
  title: lists_2
  unittests: {}
strUpper:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'foo = "   asfd"

    self.test_results.append(foo.upper().strip() == self._function(foo))

    foo = "123%asf d "

    self.test_results.append(foo.upper().strip() == self._function(foo))

    foo = "ASDF"

    self.test_results.append(foo == self._function(foo))

    foo = ""

    self.test_results.append(foo == self._function(foo))

    foo = "   \\n"

    self.test_results.append(foo.strip() == self._function(foo))'
  pretest: ''
  setup: ''
  signature: 'def strUpper(a_string): ->     return upper_stripped'
  solution: "def strUpper(a_string):\n    upper_stripped = a_string.upper().strip()\n\
    \    return upper_stripped"
  tags: ''
  teardown: ''
  text: 'Write a function called "strUpper" that takes a string as an argument

    and returns the string without any whitespace on the ends and all upper

    case.'
  title: strings_2
  unittests: {}
sumAllItems:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self.test_results.append(0.0000001 > 10.1 - self._function([2, 4, 20,
    4.1, -20]))

    self.test_results.append(0 == self._function((-1, 1)))

    self.test_results.append(None == self._function(()))

    self.test_results.append(None == self._function([]))'
  pretest: ''
  setup: ''
  signature: 'def sumAllItems(some_nums): ->     return the_sum'
  solution: "def sumAllItems(some_nums):\n    if len(some_nums) == 0:\n        the_sum\
    \ = None\n    else:\n        the_sum = sum(some_nums)\n    return the_sum"
  tags: ''
  teardown: ''
  text: 'Write a function called sumAllItems that accepts a list or tuple of

    numbers, summs them, and returns the sum.  If the list is empty, return

    None, rather than zero.'
  title: lists_1
  unittests: {}
toInt:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: self.test_results.append(3 == self._function(3.9))
  pretest: ''
  setup: ''
  signature: 'def toInt(a_float): ->     return an_integer'
  solution: "def toInt(a_float):\n    an_integer = int(a_float)\n    return an_integer"
  tags: ''
  teardown: ''
  text: 'Write a function called toInt that accepts an interger or floating point

    number and returns it as an integer.  E.g. 3.3 becomes 3.'
  title: basic_math_3
  unittests: {}
twosTruthiness:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'self._function([], [], [], [])

    ''foobar''

    self._function([], [], [1,], [])

    ''foobar''

    self._function([], [], [1,], [1,])

    ''twos''

    self._function([1,], [], [1,], [1,])

    ''threes''

    self._function([1,], [1,], [1,], [1,])

    ''foobar'''
  pretest: ''
  setup: ''
  signature: 'def twosTruthiness(obj0, obj1, obj2, obj3): ->     return resulting_word'
  solution: "def twosTruthiness(obj0, obj1, obj2, obj3):\n    items = (obj0, obj1,\
    \ obj2, obj3)\n    count = len([o for o in items if o])\n    if count == 2:\n\
    \        resulting_word = \"twos\"\n    elif count == 3:\n        resulting_word\
    \ = \"threes\"\n    else:\n        resulting_word = \"foobar\"\n    return resulting_word"
  tags: ''
  teardown: ''
  text: 'Write a function called twosTruthiness that is given four boolean values.

    if any two of the four are True, then return "twos".  If any three of them

    are True, then return "threes", if less than two or four of them are True,

    then return "foobar"'
  title: branching_2
  unittests: {}
undToShortCSV:
  imports: "\nimport os\nimport random\nimport re\nimport shutil\nimport string\n\n\
    def _randStr(str_len=10):\n    return ''.join(random.choices(string.ascii_uppercase,\
    \ k=str_len))\n"
  posttest: 'out = self._function(''one_two_three_four_five'')

    self.test_results.append(out == ''one,two,three'')

    out = self._function(''one_two_ '')

    self.test_results.append(out == ''one,two, '')

    out = self._function('' _ __ _ '')

    self.test_results.append(out == '' , ,'')'
  pretest: ''
  setup: ''
  signature: 'def undToShortCSV(und_sep_words): ->     return comma_sep'
  solution: "def undToShortCSV(und_sep_words):\n    comma_sep = ','.join(und_sep_words.split('_')[:3])\n\
    \    return comma_sep"
  tags: ''
  teardown: ''
  text: 'Write a function called "undToShortCSV" that takes a string with words,

    each separated by an underscore, ''_'', changes the underscores to

    commas, ",", and returns only the first three words.  You can assume

    that there will always be more than three words separated by underscore

    given.'
  title: strings_7
  unittests: {}
